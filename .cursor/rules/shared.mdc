---
description: 
globs: 
alwaysApply: true
---
# AI Rules for {app-name}

{project-description}

## Tech Stack

- Vue 3
- TypeScript 5
- Tailwind 4
- Shadcn/vue

## Project Structure

When introducing changes to the project, always follow the directory structure below:

`./src` – główny katalog kodu źródłowego  
`./src/main.ts` – główny punkt wejścia aplikacji Vue  
`./src/App.vue` – główny (root) komponent aplikacji  
`./src/components` – komponenty Vue; możesz tu także umieścić podfolder np. `ui` dla globalnych widgetów  
`./src/views` – widoki (strony) aplikacji, powiązane z trasami w Vue Router  
`./src/router` – konfiguracja tras z wykorzystaniem Vue Router  
`./src/store` – miejsce na zarządzanie stanem (np. za pomocą Vuex lub Pinia)  
`./src/api` – moduły/usługi do komunikacji z backendem  
`./src/types.ts` – wspólne typy TypeScript dla frontend i backend (DTO, encje)  
`./src/lib` – pomocnicze funkcje, serwisy i moduły narzędziowe  
`./src/assets` – wewnętrzne zasoby statyczne, np. obrazy, style, czcionki  
`./public` – publicznie dostępne pliki statyczne (np. `index.html`, favicon itp.)

When modifying the directory structure, always update this section.

## Coding practices

### Guidelines for clean code

- Use feedback from linters to improve the code when making changes.
- Prioritize error handling and edge cases.
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.
