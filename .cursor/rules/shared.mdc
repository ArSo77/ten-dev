---
description: 
globs: 
alwaysApply: true
---
# AI Rules for {app-name}

{project-description}

## Tech Stack

- Vue 3
- TypeScript 5
- Tailwind 4

## Project Structure

When working on this Vue 3 project, please adhere to the following directory layout:

- `./src` - Contains the main application source code for the Vue app.
- `./src/components` - Vue single-file components forming the UI.
- `./src/views` - Vue views corresponding to application routes.
- `./src/router` - Configuration and route definitions for Vue Router.
- `./src/store` - State management modules (using Vuex or Pinia).
- `./src/assets` - Static assets such as images, fonts, and styles.
- `./src/types` - Shared TypeScript types and interfaces.
- `./src/utils` - Utility functions and helper modules.
- `./src/services` - Services for API interactions and business logic.
- `./public` - Public assets served directly.

Ensure that any modifications to the directory structure are reflected in this section. 

When modifying the directory structure, always update this section.

## Coding practices

### Guidelines for clean code

- Use feedback from linters to improve the code when making changes.
- Prioritize error handling and edge cases.
- Handle errors and edge cases at the beginning of functions.
- Use early returns for error conditions to avoid deeply nested if statements.
- Place the happy path last in the function for improved readability.
- Avoid unnecessary else statements; use if-return pattern instead.
- Use guard clauses to handle preconditions and invalid states early.
- Implement proper error logging and user-friendly error messages.
- Consider using custom error types or error factories for consistent error handling.