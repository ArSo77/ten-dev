// Importing database types for reference
import type { Tables } from './db/database.types';

// Extract the User entity from the database model
// Database definition for users: { id: string; email: string | null; nick: string; roles: string }
type UserEntity = Tables<'users'>;

// 1. User DTO
// Represents a user as returned by the API
export interface UserDTO {
  id: string;
  nick: string;
  email: string | null;
  roles: string;
}

// 2. CreateUserCommand
// Command model for creating a new user (pilot account).
// It uses all user fields except 'id', which is generated by the system.
export type CreateUserCommand = Omit<UserEntity, 'id'>;

// 3. UpdateUserCommand
// Command model for updating user details. According to the API plan, only 'nick' and 'email' are updated.
export type UpdateUserCommand = Pick<UserEntity, 'nick' | 'email'>;

// 4. PaginatedUsersDTO
// DTO for the response of listing users with pagination.
export interface PaginatedUsersDTO {
  users: UserDTO[];
  page: number;
  limit: number;
  total: number;
}

// Extract the Message entity from the database model
// Database definition for messages: { content: string; id: string; sender_id: string; sent_at: string }
type MessageEntity = Tables<'messages'>;

// 5. MessageDTO
// Represents a message as returned by the API. Includes optional recipients field for detailed responses.
export interface MessageDTO extends MessageEntity {
  // Optional list of recipient user IDs, provided in message details and creation responses
  recipients?: string[];
}

// 6. CreateMessageCommand
// Command model for creating a message. Omits auto-generated fields such as 'id' and 'sent_at'.
// Additionally, it includes a list of recipient IDs separately, which maps to the many-to-many relationship.
export type CreateMessageCommand = Omit<MessageEntity, 'id' | 'sent_at'> & {
  recipient_ids: string[];
};

// 7. PaginatedMessagesDTO
// DTO for the response when listing messages with pagination.
export interface PaginatedMessagesDTO {
  messages: MessageDTO[];
  page: number;
  limit: number;
  total: number;
}

// 8. LoginCommand
// Command model for user login containing credentials.
export interface LoginCommand {
  email: string;
  password: string;
}

// 9. LoginResponseDTO
// DTO for the response after a successful login. Contains a JWT token and the user data.
export interface LoginResponseDTO {
  token: string;
  user: UserDTO;
}

// 10. LogoutCommand
// Command model for user logout. This can be an empty payload since logout may not require data.
export interface LogoutCommand {} 